{"meta":{"title":"Alex的稻草小屋","subtitle":null,"description":"Jeden Tag gibt's die Möglichkeit eines Wunders.","author":"alex","url":"https://justlooks.github.io"},"pages":[],"posts":[{"title":"kubernetes - Garbage Collection","slug":"kubernetes-Garbage-Collection","date":"2017-08-31T06:19:24.000Z","updated":"2017-08-31T07:04:33.000Z","comments":true,"path":"2017/08/31/kubernetes-Garbage-Collection/","link":"","permalink":"https://justlooks.github.io/2017/08/31/kubernetes-Garbage-Collection/","excerpt":"","text":"Garbage Collection GC的用途就是清理那些原来有所有者但现在不再被所有的对象 举个例子来说，ReplicaSet是某群Pod的对象。对象的依赖者由metadata.ownerReferences定义。v1.6版本之后，ReplicationController, ReplicaSet, StatefulSet, DaemonSet, and Deployment会自动定义这个ownerReferences，当然也可以手动设置这个值进行指定。 级联删除级联删除的行为就是指删除某个对象的时候，如果其他相关对象的所有者是该对象，这些对象也会被删除。级联删除有两种模式后台级联删除和前台级联删除 后台级联删除 立即删除当前对象，尔作为被该对象所有的对象，gc会在后台进行清理 前台级联删除 根对象会进入一个““deletion in progress”的状态，在这个状态中该对象在REST API中仍然可见，该对象的deletionTimestamp会被设置，对象的metadata.finalizers的值包括foregroundDeletion。在进入这个状态后gc开始清理这些被根对象所有的对象，在这些被blocking的对象被删除后（带有ownerReference.blockOwnerDeletion=true的对象），根对象才会被清理，如果一个对象的ownerReferences被某个controller设置后，blockOwnerDeletion会按照规则被自动设置，不需要人为干预。 级联删除策略的控制通过设置所有者对象的deleteOptions.propagationPolicy域可以控制级联删除的策略，这些值包括 “Orphan”, “Foreground”, or “Background”。大多数controller资源的默认gc策略为”Orphan”。 下面的代码是background的方式清理被所有者对象background cascade delete1234kubectl proxy --port=8080curl -X DELETE localhost:8080/apis/extensions/v1beta1/namespaces/default/replicasets/my-repset \\-d &apos;&#123;&quot;kind&quot;:&quot;DeleteOptions&quot;,&quot;apiVersion&quot;:&quot;v1&quot;,&quot;propagationPolicy&quot;:&quot;Background&quot;&#125;&apos; \\-H &quot;Content-Type: application/json&quot;下面的代码是foreground的方式清理被所有者对象1234kubectl proxy --port=8080curl -X DELETE localhost:8080/apis/extensions/v1beta1/namespaces/default/replicasets/my-repset \\-d &apos;&#123;&quot;kind&quot;:&quot;DeleteOptions&quot;,&quot;apiVersion&quot;:&quot;v1&quot;,&quot;propagationPolicy&quot;:&quot;Foreground&quot;&#125;&apos; \\-H &quot;Content-Type: application/json&quot; 下面是orphan方式 kubectl proxy —port=8080 curl -X DELETE localhost:8080/apis/extensions/v1beta1/namespaces/default/replicasets/my-repset \\ -d ‘{“kind”:”DeleteOptions”,”apiVersion”:”v1”,”propagationPolicy”:”Orphan”}’ \\ -H “Content-Type: application/json” kubectl也支持级联删除方式，设置选项—cascade为true就可以自动删除被拥有的对象，如果留下被拥有的对象，则将该选项设置为false，默认值为true kubectl delete replicaset my-repset --cascade=false 当在deployment中使用级联删除时必须使用propagationPolicy: Foreground，来清理所有相关对象","categories":[],"tags":[{"name":"kubernetes","slug":"kubernetes","permalink":"https://justlooks.github.io/tags/kubernetes/"}]},{"title":"Markdown 语法简介","slug":"测试","date":"2017-08-29T14:06:00.000Z","updated":"2017-08-31T03:28:01.000Z","comments":true,"path":"2017/08/29/测试/","link":"","permalink":"https://justlooks.github.io/2017/08/29/测试/","excerpt":"","text":"一级标题二级标题三级标题四级标题五级标题六级标题 引用 嵌套引用 列表1 list2 list1 list2 [ ] [X] 1print &quot;hello world!\\n&quot;; 斜体 粗体 my blog &#x6d;&#121;&#64;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d; x^yR_{m \\times n} = U_{m \\times m} S_{m \\times n} V_{n \\times n}' st=>start: Start|past:>http://www.google.com[blank] e=>end: End|future:>http://www.google.com op1=>operation: My Operation|past op2=>operation: Stuff|current sub1=>subroutine: My Subroutine|invalid cond=>condition: Yes or No?|approved:>http://www.google.com c2=>condition: Good idea|rejected io=>inputoutput: catch something...|future st->op1(right)->cond cond(yes, right)->c2 cond(no)->sub1(left)->op1 c2(yes)->io->e c2(no)->op2->e{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-08-29T12:33:26.000Z","updated":"2017-08-29T12:33:26.000Z","comments":true,"path":"2017/08/29/hello-world/","link":"","permalink":"https://justlooks.github.io/2017/08/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}